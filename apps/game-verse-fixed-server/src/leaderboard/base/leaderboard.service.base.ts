/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Leaderboard as PrismaLeaderboard,
  Game as PrismaGame,
  User as PrismaUser,
} from "@prisma/client";

export class LeaderboardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeaderboardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leaderboard.count(args);
  }

  async leaderboards<T extends Prisma.LeaderboardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaderboardFindManyArgs>
  ): Promise<PrismaLeaderboard[]> {
    return this.prisma.leaderboard.findMany<Prisma.LeaderboardFindManyArgs>(
      args
    );
  }
  async leaderboard<T extends Prisma.LeaderboardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaderboardFindUniqueArgs>
  ): Promise<PrismaLeaderboard | null> {
    return this.prisma.leaderboard.findUnique(args);
  }
  async createLeaderboard<T extends Prisma.LeaderboardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaderboardCreateArgs>
  ): Promise<PrismaLeaderboard> {
    return this.prisma.leaderboard.create<T>(args);
  }
  async updateLeaderboard<T extends Prisma.LeaderboardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaderboardUpdateArgs>
  ): Promise<PrismaLeaderboard> {
    return this.prisma.leaderboard.update<T>(args);
  }
  async deleteLeaderboard<T extends Prisma.LeaderboardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaderboardDeleteArgs>
  ): Promise<PrismaLeaderboard> {
    return this.prisma.leaderboard.delete(args);
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.leaderboard
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.leaderboard
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

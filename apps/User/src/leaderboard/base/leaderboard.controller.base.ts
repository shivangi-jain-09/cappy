/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeaderboardService } from "../leaderboard.service";
import { LeaderboardCreateInput } from "./LeaderboardCreateInput";
import { Leaderboard } from "./Leaderboard";
import { LeaderboardFindManyArgs } from "./LeaderboardFindManyArgs";
import { LeaderboardWhereUniqueInput } from "./LeaderboardWhereUniqueInput";
import { LeaderboardUpdateInput } from "./LeaderboardUpdateInput";

export class LeaderboardControllerBase {
  constructor(protected readonly service: LeaderboardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Leaderboard })
  async createLeaderboard(
    @common.Body() data: LeaderboardCreateInput
  ): Promise<Leaderboard> {
    return await this.service.createLeaderboard({
      data: data,
      select: {
        createdAt: true,
        gameId: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Leaderboard] })
  @ApiNestedQuery(LeaderboardFindManyArgs)
  async leaderboards(@common.Req() request: Request): Promise<Leaderboard[]> {
    const args = plainToClass(LeaderboardFindManyArgs, request.query);
    return this.service.leaderboards({
      ...args,
      select: {
        createdAt: true,
        gameId: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Leaderboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leaderboard(
    @common.Param() params: LeaderboardWhereUniqueInput
  ): Promise<Leaderboard | null> {
    const result = await this.service.leaderboard({
      where: params,
      select: {
        createdAt: true,
        gameId: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Leaderboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeaderboard(
    @common.Param() params: LeaderboardWhereUniqueInput,
    @common.Body() data: LeaderboardUpdateInput
  ): Promise<Leaderboard | null> {
    try {
      return await this.service.updateLeaderboard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          gameId: true,
          id: true,
          score: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Leaderboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeaderboard(
    @common.Param() params: LeaderboardWhereUniqueInput
  ): Promise<Leaderboard | null> {
    try {
      return await this.service.deleteLeaderboard({
        where: params,
        select: {
          createdAt: true,
          gameId: true,
          id: true,
          score: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Game as PrismaGame,
  Leaderboard as PrismaLeaderboard,
  Session as PrismaSession,
} from "@prisma/client";

export class GameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GameCountArgs, "select">): Promise<number> {
    return this.prisma.game.count(args);
  }

  async games<T extends Prisma.GameFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameFindManyArgs>
  ): Promise<PrismaGame[]> {
    return this.prisma.game.findMany<Prisma.GameFindManyArgs>(args);
  }
  async game<T extends Prisma.GameFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameFindUniqueArgs>
  ): Promise<PrismaGame | null> {
    return this.prisma.game.findUnique(args);
  }
  async createGame<T extends Prisma.GameCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameCreateArgs>
  ): Promise<PrismaGame> {
    return this.prisma.game.create<T>(args);
  }
  async updateGame<T extends Prisma.GameUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameUpdateArgs>
  ): Promise<PrismaGame> {
    return this.prisma.game.update<T>(args);
  }
  async deleteGame<T extends Prisma.GameDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameDeleteArgs>
  ): Promise<PrismaGame> {
    return this.prisma.game.delete(args);
  }

  async findLeaderboards(
    parentId: string,
    args: Prisma.LeaderboardFindManyArgs
  ): Promise<PrismaLeaderboard[]> {
    return this.prisma.game
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .leaderboards(args);
  }

  async findSessions(
    parentId: string,
    args: Prisma.SessionFindManyArgs
  ): Promise<PrismaSession[]> {
    return this.prisma.game
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }
}
